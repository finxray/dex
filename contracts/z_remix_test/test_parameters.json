{
  "CONTRACT_DEPLOYMENT": {
    "PoolManager_Constructor": {
      "_defaultAlpha": "0x1111111111111111111111111111111111111111",
      "_defaultBeta": "0x2222222222222222222222222222222222222222",
      "description": "Default quoter addresses for testing"
    }
  },

  "TEST_ADDRESSES": {
    "ETH_ADDRESS": "0x0000000000000000000000000000000000000000",
    "PLACEHOLDER_TOKEN_A": "0x1234567890123456789012345678901234567890",
    "PLACEHOLDER_TOKEN_B": "0x9876543210987654321098765432109876543210",
    "note": "Replace TOKEN_A and TOKEN_B with actual deployed addresses"
  },

  "POOL_CREATION_TESTS": {
    "ETH_TokenA_Pool": {
      "asset0": "0x0000000000000000000000000000000000000000",
      "asset1": "TOKEN_A_ADDRESS_HERE",
      "quoter": "0x3333333333333333333333333333333333333333",
      "markings": "0x123456",
      "description": "ETH + ERC20 pool (ETH is always asset0)"
    },
    "TokenA_TokenB_Pool": {
      "asset0": "LOWER_ADDRESS_TOKEN",
      "asset1": "HIGHER_ADDRESS_TOKEN", 
      "quoter": "0x3333333333333333333333333333333333333333",
      "markings": "0xabcdef",
      "description": "ERC20 + ERC20 pool (sort addresses first)"
    }
  },

  "LIQUIDITY_TESTS": {
    "ETH_TokenA_AddLiquidity": {
      "poolID": "CALCULATE_FROM_ASSEMBLEID",
      "asset0": "0x0000000000000000000000000000000000000000",
      "asset1": "TOKEN_A_ADDRESS_HERE", 
      "amount0": "1000000000000000000",
      "amount1": "1000000000000000000000",
      "ETH_VALUE": "1000000000000000000",
      "description": "Add 1 ETH + 1000 TokenA"
    },
    "TokenA_TokenB_AddLiquidity": {
      "poolID": "CALCULATE_FROM_ASSEMBLEID",
      "asset0": "TOKEN_A_ADDRESS_HERE",
      "asset1": "TOKEN_B_ADDRESS_HERE",
      "amount0": "1000000000000000000000",
      "amount1": "500000000000000000000", 
      "ETH_VALUE": "0",
      "description": "Add 1000 TokenA + 500 TokenB"
    },
    "RemoveLiquidity": {
      "poolID": "SAME_AS_ADD_LIQUIDITY",
      "asset0": "SAME_AS_ADD_LIQUIDITY",
      "asset1": "SAME_AS_ADD_LIQUIDITY",
      "liquidity": "500000000000000000000",
      "description": "Remove 50% of liquidity"
    }
  },

  "SWAP_TESTS": {
    "ETH_to_TokenA": {
      "poolID": "ETH_TOKENA_POOL_ID",
      "asset0": "0x0000000000000000000000000000000000000000",
      "asset1": "TOKEN_A_ADDRESS_HERE",
      "amountIn": "100000000000000000",
      "zeroForOne": true,
      "minAmountOut": "100000000000000000000",
      "ETH_VALUE": "100000000000000000",
      "description": "Swap 0.1 ETH for TokenA"
    },
    "TokenA_to_ETH": {
      "poolID": "ETH_TOKENA_POOL_ID", 
      "asset0": "0x0000000000000000000000000000000000000000",
      "asset1": "TOKEN_A_ADDRESS_HERE",
      "amountIn": "130000000000000000000",
      "zeroForOne": false,
      "minAmountOut": "50000000000000000",
      "ETH_VALUE": "0",
      "description": "Swap 130 TokenA for ETH"
    },
    "TokenA_to_TokenB": {
      "poolID": "TOKENA_TOKENB_POOL_ID",
      "asset0": "TOKEN_A_ADDRESS_HERE",
      "asset1": "TOKEN_B_ADDRESS_HERE", 
      "amountIn": "100000000000000000000",
      "zeroForOne": true,
      "minAmountOut": "100000000000000000000",
      "ETH_VALUE": "0",
      "description": "Swap 100 TokenA for TokenB"
    }
  },

  "TOKEN_OPERATIONS": {
    "Mint_Tokens": {
      "amount": "10000000000000000000000",
      "description": "Mint 10,000 tokens for testing"
    },
    "Approve_PoolManager": {
      "amount": "115792089237316195423570985008687907853269984665640564039457584007913129639935",
      "description": "Max approval for PoolManager"
    }
  },

  "ASSEMBLY_ID_TESTS": {
    "Test1": {
      "asset0": "0x0000000000000000000000000000000000000000",
      "asset1": "0x1234567890123456789012345678901234567890",
      "quoter": "0x3333333333333333333333333333333333333333", 
      "markings": "0x123456",
      "expected_note": "Calculate this to verify assemblePoolID works"
    },
    "Test2": {
      "asset0": "0x1111111111111111111111111111111111111111",
      "asset1": "0x2222222222222222222222222222222222222222",
      "quoter": "0x3333333333333333333333333333333333333333",
      "markings": "0xabcdef",
      "expected_note": "Different parameters for comparison"
    }
  },

  "GAS_TESTING": {
    "TestSlotRead_Deploy": {
      "constructor_params": "none",
      "description": "Deploy TestSlotRead contract to test storage gas costs"
    },
    "TestSlotRead_getValue_Test": {
      "function": "getValue",
      "id": 3,
      "expected_return": 777,
      "expected_gas_cold": "~2100",
      "expected_gas_warm": "~100",
      "description": "Test single storage slot read"
    },
    "TestSlotRead_getMultipleValues_Test": {
      "function": "getMultipleValues", 
      "ids": [1, 2, 3, 4, 5],
      "expected_return": [100, 200, 777, 888, 999],
      "description": "Test multiple storage reads (warm vs cold)"
    },
    "TestSlotRead_setValue_Test": {
      "function": "setValue",
      "id": 10,
      "value": 1234,
      "description": "Set new value for testing"
    },
    "TestInventories_Deploy": {
      "constructor_params": "none",
      "description": "Deploy TestInventories contract - exact ERC6909 replica"
    },
    "TestInventories_getInventory_MainTest": {
      "function": "getInventory",
      "poolId": "42955307580170980946467815337668002166680498660974576864971747189779899351040",
      "expected_return": ["1000000000000000000000", "2000000000000000000000"],
      "expected_gas": "~2800",
      "description": "Test exact same poolID as PoolManager comment - NO virtual function overhead!"
    },
    "TestInventories_getInventory_Simple": {
      "function": "getInventory",
      "poolId": 1,
      "expected_return": ["500000000000000000000", "750000000000000000000"],
      "expected_gas": "~2800",
      "description": "Simple poolID test - returns tuple instead of struct"
    },
    "TestInventories_getInventory_Pattern": {
      "function": "getInventory",
      "poolId": 3,
      "expected_return": ["777000000000000000000", "888000000000000000000"],
      "expected_gas": "~2800", 
      "description": "Pattern matching test (777/888) - optimized gas usage"
    },
    "TestInventories_getAsset0Only": {
      "function": "getAsset0Only",
      "poolId": 1,
      "expected_return": "500000000000000000000",
      "expected_gas": "~2800",
      "description": "Same SLOAD but return only asset0 - bit manipulation"
    },
    "TestInventories_getBothAssetsSeparately": {
      "function": "getBothAssetsSeparately", 
      "poolId": 1,
      "expected_return": ["500000000000000000000", "750000000000000000000"],
      "expected_gas": "~2800",
      "description": "Single SLOAD + bit operations (same as getInventory now)"
    },
    "TestInventories_getMultipleInventories": {
      "function": "getMultipleInventories",
      "poolIds": [1, 2, 3],
      "expected_return": {
        "asset0s": ["500000000000000000000", "100000000000000000", "777000000000000000000"],
        "asset1s": ["750000000000000000000", "200000000000000000", "888000000000000000000"]
      },
      "expected_gas_cold": "~8400",
      "expected_gas_warm": "~600",
      "description": "Multiple inventories - returns separate arrays, optimized gas"
    }
  }
}